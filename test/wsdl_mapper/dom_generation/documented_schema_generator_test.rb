require 'test_helper'

require 'wsdl_mapper/schema/parser'
require 'wsdl_mapper/generation/context'
require 'wsdl_mapper/dom_generation/documented_schema_generator'

module DomGenerationTests
  module GeneratorTests
    class DocumentedSchemaGeneratorTest < Minitest::Test
      include WsdlMapper::Generation
      include WsdlMapper::DomGeneration

      def setup
        @tmp_path = TestHelper.get_tmp_path
      end

      def teardown
        @tmp_path.unlink
      end

      def test_class_documentation
        schema = TestHelper.parse_schema 'basic_note_type.xsd'
        context = Context.new @tmp_path.to_s
        generator = DocumentedSchemaGenerator.new context

        result = generator.generate schema

        expected_file = @tmp_path.join("note_type.rb")
        assert File.exists? expected_file

        generated_class = File.read expected_file
        assert_equal <<RUBY, generated_class
# @xml_name noteType
class NoteType
  # @!attribute to
  #   @return [String]
  #   @xml_name to
  attr_accessor :to

  # @!attribute from
  #   @return [String]
  #   @xml_name from
  attr_accessor :from

  # @!attribute heading
  #   @return [String]
  #   @xml_name heading
  attr_accessor :heading

  # @!attribute body
  #   @return [String]
  #   @xml_name body
  attr_accessor :body

  # This is the autogenerated default constructor.
  #
  # @param to [String]
  # @param from [String]
  # @param heading [String]
  # @param body [String]
  #
  def initialize(to: nil, from: nil, heading: nil, body: nil)
    @to = to
    @from = from
    @heading = heading
    @body = body
  end
end
RUBY

        expected_file = @tmp_path.join(".yardopts")
        assert File.exists? expected_file

        generated_file = File.read expected_file
        assert_equal <<SH, generated_file
--tag xml_name:"XML Name"
--tag xml_namespace:"XML Namespace"
--tag xml_value:"XML Value"
--markup markdown
--markup-provider redcarpet
**/*.rb
SH
      end
    end
  end
end

